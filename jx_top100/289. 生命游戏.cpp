/*
根据百度百科，生命游戏，简称为生命，是英国数学家约翰·何顿·康威在1970年发明的细胞自动机。

给定一个包含 m × n 个格子的面板，每一个格子都可以看成是一个细胞。每个细胞具有一个初始状态 live（1）即为活细胞， 
或 dead（0）即为死细胞。每个细胞与其八个相邻位置（水平，垂直，对角线）的细胞都遵循以下四条生存定律：

如果活细胞周围八个位置的活细胞数少于两个，则该位置活细胞死亡；
如果活细胞周围八个位置有两个或三个活细胞，则该位置活细胞仍然存活；
如果活细胞周围八个位置有超过三个活细胞，则该位置活细胞死亡；
如果死细胞周围正好有三个活细胞，则该位置死细胞复活；
根据当前状态，写一个函数来计算面板上细胞的下一个（一次更新后的）状态。下一个状态是通过将上述规则同时应用于当前状态下的每个细胞所形成的，其中细胞的出生和死亡是同时发生的。

示例:

输入: 
[
  [0,1,0],
  [0,0,1],
  [1,1,1],
  [0,0,0]
]
输出: 
[
  [0,0,0],
  [1,0,1],
  [0,1,1],
  [0,1,0]
]
进阶:

你可以使用原地算法解决本题吗？请注意，面板上所有格子需要同时被更新：你不能先更新某些格子，然后使用它们的更新后的值再更新其他格子。
本题中，我们使用二维数组来表示面板。原则上，面板是无限的，但当活细胞侵占了面板边界时会造成问题。你将如何解决这些问题？

*/

//这道题，能想到用另一个表去记录细胞附近1的个数
// 但是要用原地，就需要换个思考，就是1的加一，0的减一，
// 有个区分，也能继续知道哪个位置是1,正负区分

class Solution {
public:
    void gameOfLife(vector<vector<int>>& board) {
        
        
        int row = board.size();
        int col = board[0].size();
        
        
        for(int i =0;i<row;++i){
            for(int j = 0;j<col;++j){
                if(board[i][j] > 0){
                    // cout << i << " " << j << endl;
                    for(int up = -1; up <=1;++up)
                        for(int down=-1;down<=1;++down){
                            if(up==0 && down==0)
                                continue;
                            cal(board, row,col,i+up,j+down);
                        }
                }
            }
        }
        
        for(int i =0;i<row;++i){
            for(int j = 0;j<col;++j){
                int num = board[i][j];
                
                if(num == 3 || num == 4 || num == -3)
                    board[i][j] = 1;
                else
                    board[i][j] = 0;
                
            }
        }
        

        
    }
    
    void cal(vector<vector<int>>& board, int row,int col,int m,int n){
        
        if(m <0 || m >= row || n<0 || n>=col)
            return ;
        
        if(board[m][n] <= 0)
            board[m][n] -= 1;
        else
            board[m][n] += 1;
    }
};